/*
 * AlmaRM Model - Java represenation of the model AlmaRM is built on.
 * Copyright (C) 2018  ALMA MATER STUDIORUM - Universit√† di Bologna
 *
 * This file is part of AlmaRM Model.
 *
 * AlmaRM Model is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * AlmaRM Model is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with AlmaRM Model.  If not, see <https://www.gnu.org/licenses/>.
 */
package it.unibo.almarm.model.accordi;

// Generated 11-feb-2008 11.45.49 by Hibernate Tools 3.2.0.CR1

import it.unibo.almarm.model.attori.Attore;
import it.unibo.almarm.model.attori.Esterno;
import it.unibo.almarm.model.attori.Persona;
import it.unibo.almarm.model.attori.Struttura;
import it.unibo.almarm.util.Common;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;

/**
 * Accordo generated by hbm2java
 */
public class Accordo implements java.io.Serializable {

	private static final long serialVersionUID = 1L;
	
	private static Logger  log = Logger.getLogger(Accordo.class);

	private Long id;
	private TipoAccordo tipoAccordo;
	private String descrizione;
	private Long idTipoCompenso;
	private Date dataInizio;
	private Date dataFine;
	private Date dataStipula;
	private Date dataPresaServizio;
	private String note;
	private String esitoApprovazione;
	private Date dataApprovazione;
	private String esitoStipula;
	private Long importoRiferimento;
	private Character flagQuadro = 'N';
	private String stato = StatoAccordo.INIZIALE.getValore();
	private Date dataPresaInCarica;
	private Date dataAccettazione;
	private Character esitoAccettazione;

	//private Long operatorePresaInCarica;
	private Persona operatorePresaInCarica;

	private Persona operatoreApprovazione;
	private String commentoApprovazione;
	
	//private Long operatoreStipula;
	private Persona operatoreStipula; 
	
	private Date dataInserimento;
	
	private String numeroProtocollo;
	private String numeroProtocolloInterno;
	private String repertorio;
	private Date dataProtocollo;
	private String annotazioni;
	
	private Accordo accordoQuadro;
	
	private Set<AllegatoAccordo> allegatiAccordo = new HashSet<AllegatoAccordo>();
	private Integer durata;
	private Character flagInterno;
	private Accordo accordoPredecessore;
	
	private Character fQ;
	private Set<AccordoAttore> accordoAttori = new HashSet<AccordoAttore>(0);
	private Set<AccordoAttoreStorico> accordoAttoriStorico = new HashSet<AccordoAttoreStorico>(0);
	private Set<Proroga> proroghe = new HashSet<Proroga>();
	
	public enum tipiConvenzione
	{
		TUTTI ("--Tutti--", ""),
		NORMALE ("Normale", "N"),
		QUADRO ("Quadro", "Q"),
		ADESIONE ("Adesione", "A");
		
		private String nome;
		private String sigla;
		tipiConvenzione(String n, String s) {nome = n;sigla = s;}
		public String getNome() {return nome;}
		public String getSigla() {return sigla;}
		public String getLabel() {return nome + (StringUtils.isNotBlank(sigla)?" (" + sigla + ")":"");}
		public static List<tipiConvenzione> getTipiConvenzione() {
			List<tipiConvenzione> l = new ArrayList<tipiConvenzione>();
			l.add(TUTTI);
			l.add(NORMALE);
			l.add(QUADRO);
			l.add(ADESIONE);
			return l;
		}
		public String getLabelPre() {return sigla + " - " + nome;}
	}
	
	public Accordo()
	{
		log.debug("Creato nuovo oggetto di modello Accordo!!");
	}
	

	public Long getId() {
		return this.id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public TipoAccordo getTipoAccordo() {
		return this.tipoAccordo;
	}

	public void setTipoAccordo(TipoAccordo TipoAccordo) {
		this.tipoAccordo = TipoAccordo;
	}


	public String getDescrizione() {
		return this.descrizione;
	}

	public void setDescrizione(String descrizione) {
		this.descrizione = descrizione;
	}

	public Long getIdTipoCompenso() {
		return this.idTipoCompenso;
	}

	public void setIdTipoCompenso(Long idTipoCompenso) {
		this.idTipoCompenso = idTipoCompenso;
	}
	public Date getDataInizio() {
		return this.dataInizio;
	}

	public void setDataInizio(Date dataInizio) {
		this.dataInizio = dataInizio;
	}

	public Date getDataFine() {
		return this.dataFine;
	}

	public void setDataFine(Date dataFine) {
		this.dataFine = dataFine;
	}

	public Date getDataStipula() {
		return this.dataStipula;
	}

	public void setDataStipula(Date dataStipula) {
		this.dataStipula = dataStipula;
	}

	public Date getDataPresaServizio() {
		return this.dataPresaServizio;
	}

	public void setDataPresaServizio(Date dataPresaServizio) {
		this.dataPresaServizio = dataPresaServizio;
	}

	public String getNote() {
		return this.note;
	}

	public void setNote(String note) {
		this.note = note;
	}

	public String getEsitoApprovazione() {
		return this.esitoApprovazione;
	}

	public void setEsitoApprovazione(String esitoApprovazione) {
		this.esitoApprovazione = esitoApprovazione;
	}

	public Date getDataApprovazione() {
		return this.dataApprovazione;
	}

	public void setDataApprovazione(Date dataApprovazione) {
		this.dataApprovazione = dataApprovazione;
	}

	public String getEsitoStipula() {
		return this.esitoStipula;
	}

	public void setEsitoStipula(String esitoStipula) {
		this.esitoStipula = esitoStipula;
	}

	public Long getImportoRiferimento() {
		return this.importoRiferimento;
	}

	public void setImportoRiferimento(Long importoRiferimento) {
		this.importoRiferimento = importoRiferimento;
	}

	public Character getFlagQuadro() {
		if (this.flagQuadro == null)
			return 'N';
		return this.flagQuadro;
	}

	public void setFlagQuadro(Character flagQuadro) {
		this.flagQuadro = flagQuadro;
	}

	public String getStato() {
		return this.stato;
	}

	public void setStato(String stato) {
		this.stato = stato;
	}

	public Date getDataPresaInCarica() {
		return this.dataPresaInCarica;
	}

	public void setDataPresaInCarica(Date dataPresaInCarica) {
		this.dataPresaInCarica = dataPresaInCarica;
	}

	public Date getDataAccettazione() {
		return this.dataAccettazione;
	}

	public void setDataAccettazione(Date dataAccettazione) {
		this.dataAccettazione = dataAccettazione;
	}

	public Character getEsitoAccettazione() {
		return this.esitoAccettazione;
	}

	public void setEsitoAccettazione(Character esitoAccettazione) {
		this.esitoAccettazione = esitoAccettazione;
	}

	public Persona getOperatoreApprovazione() {
		return this.operatoreApprovazione;
	}

	public void setOperatoreApprovazione(Persona operatoreApprovazione) {
		this.operatoreApprovazione = operatoreApprovazione;
	}

	public Date getDataInserimento() {
		return this.dataInserimento;
	}

	public void setDataInserimento(Date dataInserimento) {
		this.dataInserimento = dataInserimento;
	}
	public String getNumeroProtocollo() {
		return numeroProtocollo;
	}

	public void setNumeroProtocollo(String numeroProtocollo) {
		this.numeroProtocollo = numeroProtocollo;
	}

	public String getNumeroProtocolloInterno() {
		return numeroProtocolloInterno;
	}

	public void setNumeroProtocolloInterno(String numeroProtocolloInterno) {
		this.numeroProtocolloInterno = numeroProtocolloInterno;
	}

	public String getRepertorio() {
		return repertorio;
	}

	public void setRepertorio(String repertorio) {
		this.repertorio = repertorio;
	}

	public Date getDataProtocollo() {
		return dataProtocollo;
	}

	public void setDataProtocollo(Date dataProtocollo) {
		this.dataProtocollo = dataProtocollo;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime
				* result
				+ ((dataAccettazione == null) ? 0 : dataAccettazione.hashCode());
		result = prime
				* result
				+ ((dataApprovazione == null) ? 0 : dataApprovazione.hashCode());
		result = prime * result
				+ ((dataInizio == null) ? 0 : dataInizio.hashCode());
		result = prime * result
				+ ((dataStipula == null) ? 0 : dataStipula.hashCode());
		result = prime * result
				+ ((descrizione == null) ? 0 : descrizione.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		final Accordo other = (Accordo) obj;
		if (dataAccettazione == null) {
			if (other.dataAccettazione != null)
				return false;
		} else if (!dataAccettazione.equals(other.dataAccettazione))
			return false;
		if (dataApprovazione == null) {
			if (other.dataApprovazione != null)
				return false;
		} else if (!dataApprovazione.equals(other.dataApprovazione))
			return false;
		if (dataInizio == null) {
			if (other.dataInizio != null)
				return false;
		} else if (!dataInizio.equals(other.dataInizio))
			return false;
		if (dataStipula == null) {
			if (other.dataStipula != null)
				return false;
		} else if (!dataStipula.equals(other.dataStipula))
			return false;
		if (descrizione == null) {
			if (other.descrizione != null)
				return false;
		} else if (!descrizione.equals(other.descrizione))
			return false;
		if (getAzienda() == null) {
			if (other.getAzienda() != null)
				return false;
		} else if (!getAzienda().equals(other.getAzienda()))
			return false;
		return true;
	}

	public Set<AccordoAttore> getAccordoAttori() {
		return accordoAttori;
	}

	public void setAccordoAttori(Set<AccordoAttore> accordoAttori) {
		this.accordoAttori = accordoAttori;
	}
	
	public Date getDataLimiteInizioDecorrenzaReferente() {
		Date now = new Date();
		Calendar c = Calendar.getInstance();
		c.setTime(now);
		c.set(Calendar.HOUR, 0);
		c.set(Calendar.MINUTE, 0);
		c.set(Calendar.SECOND, 0);
		c.set(Calendar.MILLISECOND, 0);
		c.add(Calendar.DAY_OF_MONTH, 7);
		c.set(Calendar.AM_PM, Calendar.AM);
		Date limite = c.getTime();
		if (getDataInizio()!=null && getDataInizio().after(now))
			limite = null;
		return limite;
	}

	public List<Persona> getPersone() 
	{
		List<Persona> lista=new ArrayList<Persona>();
		if (accordoAttori!=null)
			for (AccordoAttore accordoAttore : accordoAttori)
			{
				if (accordoAttore.getAttore() instanceof Persona) 
					lista.add((Persona)accordoAttore.getAttore());
			}
		return lista;
	}

	public List<Esterno> getAziende() 
	{
		List<Esterno> lista=new ArrayList<Esterno>();
		if (accordoAttori!=null)
			for (AccordoAttore accordoAttore : accordoAttori)
			{
				if (accordoAttore.getAttore() instanceof Esterno) 
					lista.add((Esterno)accordoAttore.getAttore());
			}
		return lista;
	}
	
	public String getNomiAziendeAggregati() 
	{
		String descrizione="";
		if (accordoAttori!=null)
		{
			String separatore=" / ";
			String separa="";
			Esterno esterno;
			for (AccordoAttore accordoAttore : accordoAttori)
			{
				if (accordoAttore.getAttore() instanceof Esterno) 
				{
					esterno=(Esterno)accordoAttore.getAttore();
					descrizione+=separa+esterno.getRagioneSociale();
					separa=separatore;
				} 
			}
		}
		return descrizione;
	}

	public List<Attore> getAttoriPerRuoloSpecifico(Long idRuoloSpecifico)
	{
		List<Attore> l = new ArrayList<Attore>();
		for (AccordoAttore aa: accordoAttori)
			if ((aa.getIdRuoloSpecifico() != null) && (aa.getIdRuoloSpecifico().equals(idRuoloSpecifico)))
				l.add(aa.getAttore());
		return l;
	}
	
	public void removeAttorePerRuoloSpecifico(Long idAttore, Long idRuoloSpecifico)
	{
		removeAttorePerRuoloSpecifico(idAttore, idRuoloSpecifico, true);
	}
	
	public void removeAttorePerRuoloSpecifico(Long idAttore, Long idRuoloSpecifico, boolean storicizza)
	{
		List<AccordoAttore> l = new ArrayList<AccordoAttore>();
		for (AccordoAttore aa: accordoAttori)
			if (aa.getIdRuoloSpecifico().equals(idRuoloSpecifico) && aa.getAttore().getId().equals(idAttore))
				l.add(aa);
		for (AccordoAttore aa: l)
			removeAttore(aa, storicizza);
	}
	
	public void removeAttore(AccordoAttore accordoAttore)
	{		
		removeAttore(accordoAttore, null, null, true);
	}
	
	public void removeAttore(AccordoAttore accordoAttore, boolean storicizza)
	{		
		removeAttore(accordoAttore, null, null, storicizza);
	}
	
	/**
	 * richiama {@link #removeAttore(AccordoAttore, Date, Date, boolean)} passando true come 
	 * parametro di storicizzazione.
	 */
	public void removeAttore(AccordoAttore accordoAttore, Date dataInizioDecorrenza, Date dataFineDecorrenza)
	{		
		removeAttore(accordoAttore, dataInizioDecorrenza, dataFineDecorrenza, true);
	}
	
	/**
	 * Rimuove un attore dall'accordo.
	 * @param accordoAttore attore da rimuovere
	 * @param dataInizioDecorrenza valore di default di data inizio da impostare nella storicizzazione. 
	 * Il valore viene ignorato se questo accordo ha una data di inizio e si usa la data inizio dell'accordo.
	 * Se non c'e' un valore di data inizio per questo accordo e il parametro e' <code>null</code>, viene 
	 * usata la data corrente.
	 * @param dataFineDecorrenza data fine decorrenza impostata nello storico. Se <code>null</code>, si usa la data corrente.
	 * @param storicizza indica se effettuare la storicizzazione. 
	 */
	public void removeAttore(AccordoAttore accordoAttore, Date dataInizioDecorrenza, Date dataFineDecorrenza, boolean storicizza)
	{
		if (storicizza)
			storicizzaAttore(accordoAttore, dataInizioDecorrenza, dataFineDecorrenza);
		accordoAttori.remove(accordoAttore);
	}

	public List<AccordoAttoreStorico> getStoricoAccordoAttoriPerRuoloSpecifico(Long idRuoloSpecifico)
	{
		List<AccordoAttoreStorico> l = new ArrayList<AccordoAttoreStorico>();
		for (AccordoAttoreStorico aa: accordoAttoriStorico)
			if ((aa.getIdRuoloSpecifico() != null) && (aa.getIdRuoloSpecifico().equals(idRuoloSpecifico)))
				l.add(aa);
		return l;
	}
	
	public AccordoAttore getNuovoAttorePerRuoloSpecifico(Attore attore, Long idRuoloSpecifico, TipoRuoloAccordo tipoRuoloAccordo)
	{
		AccordoAttore accordoAttore = new AccordoAttore();
		accordoAttore.setIdRuoloSpecifico(idRuoloSpecifico);
		accordoAttore.setTipoRuoloAccordo(tipoRuoloAccordo);
		accordoAttore.setAttore(attore);
		return accordoAttore;
	}
	

	public AccordoAttoreStorico getNuovoAttorePerStorico(AccordoAttore accordoAttore) {
		return getNuovoAttorePerStorico(accordoAttore, null);
	}
	
	public AccordoAttoreStorico getNuovoAttorePerStorico(AccordoAttore accordoAttore, Date inizioDecorrenza) {
		java.util.Date dataInizio = inizioDecorrenza;
		if (dataInizio==null)
			dataInizio = new java.util.Date();
		AccordoAttoreStorico storico = new AccordoAttoreStorico();
		storico.setIdRuoloSpecifico(accordoAttore.getIdRuoloSpecifico());
		storico.setTipoRuoloAccordo(accordoAttore.getTipoRuoloAccordo());
		storico.setAttore(accordoAttore.getAttore());
		storico.setDataInizio(dataInizio);
		storico.setDataInserimento(new java.util.Date());
		storico.setNuovo(true);
		return storico;
	}
	
	public AccordoAttoreStorico getAttorePerStorico(AccordoAttore accordoAttore) {
		AccordoAttoreStorico attorePerStorico=null;
		if (accordoAttoriStorico != null && !accordoAttoriStorico.isEmpty()) 
			for (AccordoAttoreStorico as : accordoAttoriStorico) 
				if (as.getIdRuoloSpecifico().equals(accordoAttore.getIdRuoloSpecifico())
					&&	as.getAttore().getId().equals(accordoAttore.getAttore().getId())) 
				{
					if (attorePerStorico == null  
						|| (attorePerStorico.getDataFine() != null &&  as.getDataFine() == null)
						|| (attorePerStorico.getDataFine() != null &&  as.getDataFine() != null
								&& as.getDataFine().after(attorePerStorico.getDataFine()))
						)
						attorePerStorico=as;
				}
		return attorePerStorico;
	}
	
	private void storicizzaAttore(AccordoAttore accordoAttore, Date dataInizioDecorrenza, Date dataFineDecorrenza)
	{
		if (dataInizioDecorrenza==null)
			dataInizioDecorrenza = new Date();
		AccordoAttoreStorico storico=getAttorePerStorico(accordoAttore);
		if (storico == null)
		{
			if (this.getId() != null &&  accordoAttore.getId() != null)
			{
				// ne creo uno appositamente e lo aggiungo
				storico = getNuovoAttorePerStorico(accordoAttore, dataInizioDecorrenza);
				storico.setId(accordoAttore.getId());
				storico.setDataInizio(this.getDataInizio() != null ? this.getDataInizio() : dataInizioDecorrenza);
				/*
				 * se non c'e' una data fine esplicita:
				 *   - nel caso di storico con data inizio nel passato, usiamo la data corrente
				 *   - altrimenti usiamo la data inizio dello storico, per evitare di avere recordo con data inizio maggiore della data fine
				 */
				Date dataFineStorico = dataFineDecorrenza;
				if (dataFineStorico==null)
					if (storico.getDataInizio()!=null && storico.getDataInizio().after(new Date()))
						dataFineStorico = storico.getDataInizio();
					else 
						dataFineStorico = new Date();
				storico.setDataFine(dataFineStorico);
				getAccordoAttoriStorico().add(storico);
			}
			return;
		}
		
		if (this.getId() != null  && accordoAttore.getId() != null )
		{
			if (!storico.isNuovo()) {
				/*
				 * anche qui: se non c'e' una data fine esplicita:
				 *   - nel caso di storico con data inizio nel passato, usiamo la data corrente
				 *   - altrimenti usiamo la data inizio dello storico, per evitare di avere recordo con data inizio maggiore della data fine
				 */
				Date dataFineStorico = dataFineDecorrenza;
				if (dataFineStorico==null)
					if (storico.getDataInizio()!=null && storico.getDataInizio().after(new Date()))
						dataFineStorico = storico.getDataInizio();
					else 
						dataFineStorico = new Date();
				storico.setDataFine(dataFineStorico);
			}
			else
				accordoAttoriStorico.remove(storico);
		}
		else
			accordoAttoriStorico.remove(storico);
	}
	
	public String getCommentoApprovazione() {
		return commentoApprovazione;
	}

	public void setCommentoApprovazione(String commentoApprovazione) {
		this.commentoApprovazione = commentoApprovazione;
	}

	public Accordo getAccordoQuadro() {
		return accordoQuadro;
	}

	public void setAccordoQuadro(Accordo accordoQuadro) {
		this.accordoQuadro = accordoQuadro;
	}


	public String getTipoConv() {
		if((flagQuadro!=null) && (flagQuadro.toString().equalsIgnoreCase("S")))
			return "Q";

		if ((accordoQuadro !=null)
			&& (accordoQuadro.getId()!=null))
			return "A";
		
		return "N";
	}
	
	public Boolean isUnAccordoQuadro()
	{
		if((flagQuadro!=null) && (flagQuadro.toString().equalsIgnoreCase("S")))
			return true;
		return false;
	}
	
	public Boolean isAdesione()
	{
		return getTipoConv().equals(tipiConvenzione.ADESIONE.getSigla());
	}

	public void setTipoConv(String val) {
		if (val != null)
		{
			if (val.equals(tipiConvenzione.NORMALE.sigla))
			{
				flagQuadro = null;
				accordoQuadro = null;
			}
			else if (val.equals(tipiConvenzione.QUADRO.sigla))
			{
				flagQuadro = 'S';
				accordoQuadro = null;
			}
			else if (val.equals(tipiConvenzione.NORMALE.sigla))
			{
				flagQuadro = null;
			}
		}
	}

	public Persona getOperatorePresaInCarica() {
		return operatorePresaInCarica;
	}

	public void setOperatorePresaInCarica(Persona operatorePresaInCarica) {
		this.operatorePresaInCarica = operatorePresaInCarica;
	}

	public Persona getOperatoreStipula() {
		return operatoreStipula;
	}

	public void setOperatoreStipula(Persona operatoreStipula) {
		this.operatoreStipula = operatoreStipula;
	}

	public Character getFQ() {
		return fQ;
	}

	public void setFQ(Character fq) {
		fQ = fq;
	}
	
	public void setMessageKeyForStato(String messageKey) {}

	/**
	 * Verifica se l'accordo puo' essere approvato automanticamente.
	 * Attualmente perche' un Accordo sia approvato automanticamente
	 * e' sufficiente che il tipo di Accordo sia impostato per 
	 * l'approvazione automantica.
	 * 
	 * @return	true, se e solo se l'accordo puo' essere approvato 
	 * 			automaticamente, false altrimenti.
	 * 
	 */
	public boolean autoApprova() {
		
		if(getTipoAccordo() == null)
			return false;
		
		return getTipoAccordo().isAutoApprova();
	}
	
	/**
	 * 
	 * @return una stringa con la lista dei nomi delle strutture di Ateneo associate all'accordo
	 */
	public String getNomiStruttureAteneoAggregati()
	{
		String descrizione="";
		if (accordoAttori!=null)
		{
			String separatore=" / ";
			String separa="";
			Struttura struttura;
			for (AccordoAttore accordoAttore : accordoAttori)
			{
				if (accordoAttore.getAttore() instanceof Struttura) 
				{
					struttura = (Struttura)accordoAttore.getAttore();
					descrizione += separa + struttura.getNomeAttore();
					separa=separatore;
				} 
			}
		}
		return descrizione;
	}
	
	public Esterno getAzienda()
	{
		List<Esterno> l = getAziende();
		if ((l != null) && (l.size() > 0))
			return l.get(0);
		return null;
	}
	
	public String getOperatorePresaInCaricoView()
	{
		return (operatorePresaInCarica != null) ? operatorePresaInCarica.getNomeCognome() : "";
	}

	public Set<AllegatoAccordo> getAllegatiAccordo() {
		return allegatiAccordo;
	}

	public void setAllegatiAccordo(Set<AllegatoAccordo> allegatiAccordo) {
		this.allegatiAccordo = allegatiAccordo;
	}	
	
	public String getAllegato()
	{
		for (AllegatoAccordo aa: allegatiAccordo)
			if (!aa.isDocumentoStipula())
				return aa.getAllegato();
		return "";
	}
	
	public String getPathAllegato()
	{
		if (StringUtils.isNotBlank(getAllegato()))
			return getAllegato().substring(0, (getAllegato().indexOf("_") != -1 ? getAllegato().indexOf("_") : 0));
		return "";
	}
	
	public String getNomeAllegato()
	{
		if (StringUtils.isNotBlank(getAllegato()))
			return getAllegato().substring(getAllegato().lastIndexOf("/") + 1);
		return "";
	}
	
	public String getDocumentoStipula()
	{
		for (AllegatoAccordo aa: allegatiAccordo)
			if (aa.isDocumentoStipula())
				return aa.getAllegato();
		return "";
	}
	
	public String getPathDocumentoStipula()
	{
		if (StringUtils.isNotBlank(getDocumentoStipula()))
			return getDocumentoStipula().substring(0, (getDocumentoStipula().indexOf("_") != -1 ? getDocumentoStipula().indexOf("_") : 0));
		return "";
	}
	
	public String getNomeDocumentoStipula()
	{
		if (StringUtils.isNotBlank(getDocumentoStipula()))
			return getDocumentoStipula().substring(getDocumentoStipula().lastIndexOf("/") + 1);
		return "";
	}
	
	public void setDocumentoStipula(String nomeDocumento)
	{
		if (StringUtils.isNotBlank(nomeDocumento))
		{	
			AllegatoAccordo allegatoAccordo = null;
			for (AllegatoAccordo aa: allegatiAccordo)
				if (aa.isDocumentoStipula())
					allegatoAccordo = aa;
			if (allegatoAccordo == null)
			{
				allegatoAccordo = new AllegatoAccordo();
				allegatoAccordo.setDescrizione(AllegatoAccordo.DESCRIZIONE_DOCUMENTO_STIPULA);
				allegatiAccordo.add(allegatoAccordo);
			}
			allegatoAccordo.setAllegato(nomeDocumento);
		}
	}

	public void aggiungiAllegato(String nomeDocumento, String descrizione, boolean documentoStipula) {
		if (StringUtils.isNotBlank(nomeDocumento))
		{
			if (documentoStipula) {
				setDocumentoStipula(nomeDocumento);
			} else {
				setDocumentoAllegatoGenerico(nomeDocumento, descrizione);
			}
		}
	}

	public void setDocumentoAllegatoGenerico(String nomeDocumento, String descrizione) {
		AllegatoAccordo allegatoAccordo = null;
		if (getAllegatiAccordo()!=null) {
			for (AllegatoAccordo aa : getAllegatiAccordo()) {
				if (!aa.isDocumentoStipula()) {
					allegatoAccordo = aa;
				}
			}
		}
		if (allegatoAccordo==null) {
			allegatoAccordo = new AllegatoAccordo();
			getAllegatiAccordo().add(allegatoAccordo);
		}
		if (StringUtils.isNotBlank(descrizione)) {
			if (!AllegatoAccordo.DESCRIZIONE_DOCUMENTO_STIPULA.equalsIgnoreCase(descrizione)) {
				allegatoAccordo.setDescrizione(descrizione);
			}
		}
		allegatoAccordo.setAllegato(nomeDocumento);
	}

	public void setDocumentoAllegato(String nomeDocumento) {
		aggiungiAllegato(nomeDocumento, "TODO", false);
	}
	
	public String getDocumentoAllegato()
	{
		for (AllegatoAccordo aa: allegatiAccordo)
			if (!aa.isDocumentoStipula())
				return aa.getAllegato();
		return "";
	}
	
	public String getAnnotazioni() {
		return annotazioni;
	}

	public void setAnnotazioni(String annotazioni) {
		this.annotazioni = annotazioni;
	}

	public Integer getDurata() {
		return durata;
	}

	public void setDurata(Integer durata) {
		this.durata = durata;
	}

	public Character getFlagInterno() {
		if (flagInterno == null)
			return 'N';
		return flagInterno;
	}

	public void setFlagInterno(Character flagInterno) {
		this.flagInterno = flagInterno;
	}
	
	public boolean isInterno()
	{
		return (new Character('S')).equals(flagInterno);
	}
	
	@Override
	public String toString() {
		if (id != null)
			return id.toString();
		return "";
	}
	
	public String getLabelValidita() {
		return Common.getDataFormattata(dataInizio) + "<br/>" + Common.getDataFormattata(dataFine);
	}
	
	public String getColor() {
		return StatoAccordo.get(stato).getColor();
	}

	public String getColorDesc() {
		return StatoAccordo.get(stato).getValore();
	}
	
	public StatoAccordo getStatoAccordo() {
		return StatoAccordo.get(getStato());
	}

	public Accordo getAccordoPredecessore() {
		return accordoPredecessore;
	}

	public void setAccordoPredecessore(Accordo accordoPredecessore) {
		this.accordoPredecessore = accordoPredecessore;
	}

	public Set<AccordoAttoreStorico> getAccordoAttoriStorico() {
		return accordoAttoriStorico;
	}

	public void setAccordoAttoriStorico(
			Set<AccordoAttoreStorico> accordoAttoriStorico) {
		this.accordoAttoriStorico = accordoAttoriStorico;
	}
	
	public Set<Proroga> getProroghe() {
		return proroghe;
	}
	
	public void setProroghe(Set<Proroga> proroghe) {
		this.proroghe = proroghe;
	}
	
	public boolean isPresaInCarico() {
		return StatoAccordo.PRESA_IN_CARICO.getValore().equals(getStato());
	}
	public boolean isApprovata() {
		return StatoAccordo.APPROVATA.getValore().equals(getStato());
	}
	public boolean isStipulata() {
		return StatoAccordo.STIPULATA.getValore().equals(getStato());
	}
	public boolean isRifiutata() {
		return StatoAccordo.RIFIUTATA.getValore().equals(getStato());
	}
}
