/*
 * AlmaRM Model - Java represenation of the model AlmaRM is built on.
 * Copyright (C) 2018  ALMA MATER STUDIORUM - Universit√† di Bologna
 *
 * This file is part of AlmaRM Model.
 *
 * AlmaRM Model is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * AlmaRM Model is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with AlmaRM Model.  If not, see <https://www.gnu.org/licenses/>.
 */
package it.unibo.almarm.model.attori;

import it.unibo.almarm.model.esterni.RangeNumeroDipendenti;
import it.unibo.almarm.model.esterni.SettoreAttivita;
import it.unibo.almarm.model.esterni.TipoEntitaEsterna;
import it.unibo.almarm.model.luoghi.Nazione;
import it.unibo.almarm.service.RecapitoEmailManager;
import it.unibo.almarm.service.RecapitoTelefonicoManager;
import it.unibo.almarm.util.Common;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.apache.commons.lang.StringUtils;

import edu.emory.mathcs.backport.java.util.Collections;

// Generated 19-feb-2008 15.24.59 by Hibernate Tools 3.2.0.CR1

/**
 * Esterno generated by hbm2java
 */
public class Esterno extends Attore implements java.io.Serializable {

	private static final long serialVersionUID = 1L;
	
	private Nazione nazionalita;
	private TipoEntitaEsterna tipoEntitaEsterna;
	private Long entitaEsternaStruttura;
	private String partitaIva;
	private String codiceFiscale;
	private String ragioneSociale;
	private String codiceNazionale;
	private String descrizione;
	private String note;
	private RangeNumeroDipendenti rangeNumeroDipendenti;
	private Character flagAgevolazioniFiscali;
	private Character flagDatiCertificati;
	private Date dataCessazione;
	private String noteCessazione;
	
	private Set<Ufficio> uffici = new HashSet<Ufficio>(0);
	
	private Set<EsternoSettore> esternoSettori = new HashSet<EsternoSettore>(0);
	

	public Esterno() {
	}
	
	public Esterno(long id)
	{
		super(id);
	}

	public Esterno(long id, 
			String codiceNazionale) {
		super(id);
		this.codiceNazionale = codiceNazionale;
	}

	public Esterno(long id, Nazione nazionalita,
			TipoEntitaEsterna tipoEntitaesterna, Long idEntitaesternaStruttura,
			String partitaIva, String codiceFiscale, String ragioneSociale,
			String codiceNazionale, String descrizione, String note) {
		super(id);
		this.nazionalita = nazionalita;
		this.tipoEntitaEsterna = tipoEntitaesterna;
		this.entitaEsternaStruttura = idEntitaesternaStruttura;
		this.partitaIva = partitaIva;
		this.codiceFiscale = codiceFiscale;
		this.ragioneSociale = ragioneSociale;
		this.codiceNazionale = codiceNazionale;
		this.descrizione = descrizione;
		this.note = note;
	}

	public Nazione getNazionalita() {
		return this.nazionalita;
	}

	public String getPartitaIva() {
		return this.partitaIva;
	}

	public void setPartitaIva(String partitaIva) {
		this.partitaIva = partitaIva;
	}

	public String getCodiceFiscale() {
		return this.codiceFiscale;
	}

	public void setCodiceFiscale(String codiceFiscale) {
		this.codiceFiscale = codiceFiscale;
	}

	public String getRagioneSociale() {
		return this.ragioneSociale;
	}

	public void setRagioneSociale(String ragioneSociale) {
		this.ragioneSociale = ragioneSociale;
	}

	//@NotEmpty
	public String getCodiceNazionale() {
		return this.codiceNazionale;
	}

	public void setCodiceNazionale(String codiceNazionale) {
		this.codiceNazionale = codiceNazionale;
	}

	public String getDescrizione() {
		return this.descrizione;
	}

	public void setDescrizione(String descrizione) {
		this.descrizione = descrizione;
	}

	public String getNote() {
		return this.note;
	}

	public void setNote(String note) {
		this.note = note;
	}

	public TipoEntitaEsterna getTipoEntitaEsterna() {
		return tipoEntitaEsterna;
	}

	public void setTipoEntitaEsterna(TipoEntitaEsterna tipoEntitaEsterna) {
		this.tipoEntitaEsterna = tipoEntitaEsterna;
	}

	public void setNazionalita(Nazione nazionalita) {
		this.nazionalita = nazionalita;
	}

	public void setEntitaEsternaStruttura(Long entitaEsternaStruttura) {
		this.entitaEsternaStruttura = entitaEsternaStruttura;
	}

	public Long getEntitaEsternaStruttura() {
		return entitaEsternaStruttura;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result
				+ ((codiceFiscale == null) ? 0 : codiceFiscale.hashCode());
		result = prime * result
				+ ((partitaIva == null) ? 0 : partitaIva.hashCode());
		result = prime * result
				+ ((ragioneSociale == null) ? 0 : ragioneSociale.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (!(obj instanceof Esterno))
			return false;
		final Esterno other = (Esterno) obj;
		if (codiceFiscale == null) {
			if (other.getCodiceFiscale() != null)
				return false;
		} else if (!codiceFiscale.equals(other.getCodiceFiscale()))
			return false;
		if (partitaIva == null) {
			if (other.getPartitaIva() != null)
				return false;
		} else if (!partitaIva.equals(other.getPartitaIva()))
			return false;
		if (ragioneSociale == null) {
			if (other.getRagioneSociale() != null)
				return false;
		} else if (!ragioneSociale.equals(other.getRagioneSociale()))
			return false;
		return true;
	}

	public Set<EsternoSettore> getEsternoSettori() {
		return esternoSettori;
	}

	public void setEsternoSettori(Set<EsternoSettore> esternoSettori) {
		this.esternoSettori = esternoSettori;
	}

	// -------------------------------------------------------------------
	// INIZIO PROPRIETA NON MAPPATE SU DATABASE
	// -------------------------------------------------------------------
	
	// Funzioni di supporto per le pagine web per la  compilazione della 
	// relazione Esterno-Settoriattivita nel modello
	
	public List<SettoreAttivita> getSettoriAttivita() {
		List<SettoreAttivita> lst=new ArrayList<SettoreAttivita>();
		SettoreAttivita settoreAttivita=null;
		if ((this.esternoSettori!=null) && (!this.esternoSettori.isEmpty()))
		{
			for (EsternoSettore es: this.esternoSettori) 
			{
				settoreAttivita=es.getSettoreAttivita();
				if (settoreAttivita!=null)
					lst.add(settoreAttivita);
			}
		}
		
		return lst;
	}
	
	public void getSettoriAttivita(List<SettoreAttivita> settoriAttivita) {
		esternoSettori.clear();
		if (settoriAttivita!=null)
			for (SettoreAttivita settoreAttivita: settoriAttivita) 
			{
				addSettoreAttivita(settoreAttivita);
			}
	}
	
	public void setSettoriAttivita(List<SettoreAttivita> settoriAttivita) {
		esternoSettori.clear();
		if (settoriAttivita!=null)
			for (SettoreAttivita settoreAttivita: settoriAttivita) 
			{
				addSettoreAttivita(settoreAttivita);
			}
	}
	public void addSettoreAttivita(SettoreAttivita settoreattivita) {
		EsternoSettore relazione = new EsternoSettore();
		relazione.setSettoreAttivita(settoreattivita);
		this.esternoSettori.add(relazione);
	}
	
	
	public AttoreIndirizzo getSedeLegale()
	{
		for (AttoreIndirizzo a:attoreIndirizzos)
			if (a.getTipo().equals(AttoreIndirizzo.TIPO_INDIRIZZO_SEDE_LEGALE)) 
				return a;
		return null;
	}
	
	public void setSedeLegale(AttoreIndirizzo attoreindirizzo)
	{
		AttoreIndirizzo i = getSedeLegale();
		if (i != null)
		{
			i.setCap(attoreindirizzo.getCap());
			i.setFrazione(attoreindirizzo.getFrazione());
			i.setIndirizzo(attoreindirizzo.getIndirizzo());
			i.setLibero(attoreindirizzo.getLibero());
			i.setLocalita(attoreindirizzo.getLocalita());
			i.setLocalita_1(attoreindirizzo.getLocalita_1());
			i.setTerritorio(attoreindirizzo.getTerritorio());
			i.setTerritorio_1(attoreindirizzo.getTerritorio_1());
		}
		else
		{
			AttoreIndirizzo a = org.regola.util.Clonator.clone(attoreindirizzo);
			a.setId(null);
			a.setTipo(AttoreIndirizzo.TIPO_INDIRIZZO_SEDE_LEGALE);
			this.attoreIndirizzos.add(a);
		}
	}
	
	
	public RecapitoTelefonico getTelefonoUfficiale()
	{
		for (RecapitoTelefonico r:recapitoTelefonicos)
		{
			String tipo=r.getTipo();
			if (!(tipo.equalsIgnoreCase(RecapitoTelefonicoManager.TipoTelefono.FAX.getValore())))
				return r;
		}
		return null;
	}
	
	public void setTelefonoUfficiale(RecapitoTelefonico telefono)
	{
		RecapitoTelefonico r = getTelefonoUfficiale();
		if (r != null)
		{
			r.setTipo(RecapitoTelefonicoManager.TipoTelefono.FISSO.getValore());
			r.setNota(telefono.getNota());
			r.setPrefissoInt(telefono.getPrefissoInt());
			r.setTelefono(telefono.getTelefono());
		}
		else
		{
			telefono.setTipo(RecapitoTelefonicoManager.TipoTelefono.FISSO.getValore());
			telefono.setAttore(this);
			this.recapitoTelefonicos.add(telefono);
		}
	}
	
	public RecapitoTelefonico getFaxUfficiale()
	{
		for (RecapitoTelefonico r:recapitoTelefonicos)
			if (r.getTipo().equalsIgnoreCase(RecapitoTelefonicoManager.TipoTelefono.FAX.getValore()))
				return r;
		return null;
	}
	
	public void setFaxUfficiale(RecapitoTelefonico fax)
	{
		RecapitoTelefonico r = getFaxUfficiale();
		if (r != null)
		{
			r.setTipo(RecapitoTelefonicoManager.TipoTelefono.FAX.getValore());
			r.setNota(fax.getNota());
			r.setPrefissoInt(fax.getPrefissoInt());
			r.setTelefono(fax.getTelefono());
		}
		else
		{
			fax.setTipo(RecapitoTelefonicoManager.TipoTelefono.FAX.getValore());
			fax.setAttore(this);			
			this.recapitoTelefonicos.add(fax);
		}
	}
	
	public RecapitoEmail getEmailUfficiale()
	{
		for (RecapitoEmail e:recapitoEmails)
		{
			String tipo=e.getTipo();
			if (tipo.equalsIgnoreCase(RecapitoEmailManager.TipoIndirizzo.EMAIL.getValore()))
				return e;
		}
		return null;
	}
	
	public void setEmailUfficiale(RecapitoEmail email)
	{
		RecapitoEmail e = getEmailUfficiale();
		if (e != null)
		{
			e.setTipo(RecapitoEmailManager.TipoIndirizzo.EMAIL.getValore());
			e.setIndirizzo(email.getIndirizzo());
			e.setNota(email.getNota());
		}
		else
		{
			email.setTipo(RecapitoEmailManager.TipoIndirizzo.EMAIL.getValore());
			email.setAttore(this);
			this.recapitoEmails.add(email);
		}
	}

	public RecapitoEmail getLinkSitoUfficiale()
	{
		for (RecapitoEmail e:recapitoEmails)
			if (e.getTipo().equalsIgnoreCase(RecapitoEmailManager.TipoIndirizzo.SITO_WEB.getValore()))
				return e;
		RecapitoEmail re=new RecapitoEmail();
		re.setAttore(this);
		re.setIndirizzo("");
		re.setTipo(RecapitoEmailManager.TipoIndirizzo.SITO_WEB.getValore());
		return re;
	}

	public RecapitoEmail getCurrentSitoUfficiale()
	{
		for (RecapitoEmail e:recapitoEmails)
			if (e.getTipo().equalsIgnoreCase(RecapitoEmailManager.TipoIndirizzo.SITO_WEB.getValore()))
				return e;
		return null;
	}
		
		
	public void setLinkSitoUfficiale(RecapitoEmail sitoWeb)
	{
		RecapitoEmail link = getCurrentSitoUfficiale();
		if (link != null)
		{
			link.setTipo(RecapitoEmailManager.TipoIndirizzo.SITO_WEB.getValore());
			link.setIndirizzo(sitoWeb.getIndirizzo());
			link.setNota(sitoWeb.getNota());
		}
		else
		{
			sitoWeb.setTipo(RecapitoEmailManager.TipoIndirizzo.SITO_WEB.getValore());
			sitoWeb.setAttore(this);
			this.recapitoEmails.add(sitoWeb);
		}
	}

	/*  AL MOMENTO NON USATO
	 * 
	 * NB la getSettori() e' identica alla getSettoriAttivita()
	public List<SettoreAttivita> getSettori() {
		List<SettoreAttivita> lst=new ArrayList<SettoreAttivita>();
		SettoreAttivita sa=null;
		if ((this.esternoSettori!=null) && (!this.esternoSettori.isEmpty()))
		{
			for (EsternoSettore rr: this.esternoSettori) 
			{
				sa=rr.getSettoreAttivita();
				if (sa!=null)
					lst.add(sa);
			}
		}
		
		return lst;
	}
	
	public void setSettori(List<SettoreAttivita> settori) {
		this.esternoSettori.clear();
		if (settori!=null)
			for (SettoreAttivita sa: settori) 
			{
				addSettore(sa);
			}
	}
	
	public void addSettore(SettoreAttivita settoreattivita) {
		EsternoSettore relazione=new EsternoSettore();
		relazione.setSettoreAttivita(settoreattivita);
		this.esternoSettori.add(relazione);		
	}
	*/

	@Override
	public String getNomeAttore() {
		return ragioneSociale;
	}
	
	@Override
	public String getCodiceAttore() {
		if (StringUtils.isNotBlank(partitaIva))
			return partitaIva;
		if (StringUtils.isNotBlank(codiceFiscale))
			return codiceFiscale;
		return codiceNazionale;
	}

	public String getTipoCodiceAttore() {
		if (StringUtils.isNotBlank(codiceFiscale))
			return tipoCodice.COD_FISCALE.getValore();
		if (StringUtils.isNotBlank(partitaIva))
			return tipoCodice.COD_PATRITA_IVA.getValore();
		return tipoCodice.COD_NAZIONALE.getValore();
	}

	public RangeNumeroDipendenti getRangeNumeroDipendenti() {
		return rangeNumeroDipendenti;
	}

	public void setRangeNumeroDipendenti(RangeNumeroDipendenti rangeNumeroDipendenti) {
		this.rangeNumeroDipendenti = rangeNumeroDipendenti;
	}

	/* TODO PPP : TOLTO, AL MOMENTO NON USATO
	public String getDescrizioneSettoriDiAttivita()
	{
		String ret="";
		for (SettoreAttivita settore : getSettori())
			ret+=", " + settore.getLocaleDescrizione();
		return (StringUtils.isNotBlank(ret) && ( ret.length() > 2)) ? ret.substring(2)  : "" ;
	}
	*/
	public Character getFlagAgevolazioniFiscali() {
		if (flagAgevolazioniFiscali == null)
			return 'N';
		return flagAgevolazioniFiscali;
	}

	public void setFlagAgevolazioniFiscali(Character flagAgevolazioniFiscali) {
		this.flagAgevolazioniFiscali = flagAgevolazioniFiscali;
	}
	
	public Boolean isHaAgevolazioniFiscali()
	{
		return (new Character('S')).equals(flagAgevolazioniFiscali);
	}
	
	public boolean isEntePubblico()
	{
		return this.tipoEntitaEsterna.isEntePubblico();
	}

	public Character getFlagDatiCertificati() {
		if (flagDatiCertificati == null)
			return 'N';
		return flagDatiCertificati;
	}

	public void setFlagDatiCertificati(Character flagDatiCertificati) {
		this.flagDatiCertificati = flagDatiCertificati;
	}
	
	public boolean isDatiCertificati()
	{
		return (new Character('S')).equals(flagDatiCertificati);
	}

	// CHG000000009813
	public String getNazioneProvincia()
	{
		String nazioneProvincia=getNazionalita().getNazione();
		if(getSedeLegale()!= null)
			if (getNazionalita().isItalia())
			{
				if (getSedeLegale().getTerritorio()!= null)
					nazioneProvincia+= "<br />" +getSedeLegale().getTerritorio().getTerritorio();
			}
			else
			{	
				if (getSedeLegale().getLocalita() != null)
					nazioneProvincia+= "<br />" +getSedeLegale().getLocalita().getLocalita();
			}			
		
		return nazioneProvincia;
	}
	
	public String getProvincia()
	{
		if(getSedeLegale()!= null)
			if (getNazionalita().isItalia())
			{
				if (getSedeLegale().getTerritorio()!= null)
					return getSedeLegale().getTerritorio().getTerritorio();
			}
			else
			{	
				if (getSedeLegale().getLocalita() != null)
					return getSedeLegale().getLocalita().getLocalita();
			}			
		
		return "";
	}
	
	public Set<Ufficio> getUffici() {
		return uffici;
	}

	public void setUffici(Set<Ufficio> uffici) {
		this.uffici = uffici;
	}
	
	public List<Ufficio> getUfficiOrdinati() {
		List<Ufficio> uO = new ArrayList<Ufficio>(uffici);
		Collections.sort(uO, new Ufficio.UfficioComparator());
		return uO;
	}
	
	public List<Ufficio> getUfficiGeneraliOrdinati() {
		List<Ufficio> uO =  getUfficiGenerali();
		Collections.sort(uO, new Ufficio.UfficioComparator());
		return uO;
	}
	
	public List<Ufficio> getUfficiSottoareaOrdinati() {
		List<Ufficio> uO = getUfficiSottoarea();
		Collections.sort(uO, new Ufficio.UfficioComparator());
		return uO;
	}

	private List<Ufficio> getUfficiGenerali() {
		List<Ufficio> uO = new ArrayList<Ufficio>();
		for (Ufficio u : uffici)
			if (u.isCategoriaGenerale())
				uO.add(u);
		return uO;
	}
	
	private List<Ufficio> getUfficiSottoarea() {
		List<Ufficio> uO = new ArrayList<Ufficio>();
		for (Ufficio u : uffici)
			if (u.isCategoriaSottoarea())
				uO.add(u);
		return uO;
	}
	
	public boolean isAlmenoUnUfficioSottoarea(){
		for (Ufficio u : uffici)
			if (u.isCategoriaSottoarea())
				return true;
		return false;
	}
	
	public boolean isItaliano() {
		if (nazionalita == null)
			return false;
		return nazionalita.isItalia();
	}

	public Date getDataCessazione() {
		return dataCessazione;
	}

	public void setDataCessazione(Date dataCessazione) {
		this.dataCessazione = dataCessazione;
	}

	public String getNoteCessazione() {
		return noteCessazione;
	}

	public void setNoteCessazione(String noteCessazione) {
		this.noteCessazione = noteCessazione;
	}
}
